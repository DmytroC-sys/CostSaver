name: Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main  # Trigger this on push to the 'main' branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2  # Checkout the repository code

      # Step to set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Store your AWS credentials in GitHub secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step to log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step to build the Docker image
      - name: Build Docker image
        run: |
          docker build -t costsaver-app .

      # Step to tag the Docker image with the ECR repository URI
      - name: Tag Docker image
        run: |
          docker tag costsaver-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/costsaver-app:latest

      # Step to push the Docker image to AWS ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/costsaver-app:latest

      # Step to deploy the Docker image to ECS (optional - depends on your ECS setup)
      - name: Deploy to AWS ECS
        run: |
          ecs-cli configure --region ${{ secrets.AWS_REGION }} --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --cluster costsaver-cluster
          ecs-cli compose --file docker-compose.yml up
